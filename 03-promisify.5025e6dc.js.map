{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,GACH,IAAIC,QAAQC,GACjBC,WAAWC,EAAQJ,EAAIA,IAGrBI,EAASC,GAAQC,QAAQC,uBAAuBF,OAEtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,QAASC,IAElBA,EADqBW,EAASE,IAAIC,GAAQA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAK3GJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GAChB,IAAIxB,QAAS,CAACC,EAASwB,KACxB3B,MAAAA,EAAQmB,EAA0B,IAAK,KAE3Cf,WAAW,KACUkB,KAAKE,SAAW,IAGjCrB,EAAQ,CAAEyB,GAAIF,EAAYE,GAAItB,KAAMN,IAEpC2B,EAAQD,EAAYE,KACrB5B,KAID6B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACxBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG1CwB,EAAWF,IACfrB,QAAQwB,qCAAqCH,+BAG/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH","file":"03-promisify.5025e6dc.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n    return new Promise(resolve => \n      setTimeout(logger, ms, ms));\n  };\n  \n  const logger = time => console.log(`Fulfilled after ${time}ms`);\n\n  delay(2000).then(logger);\n  delay(1000).then(logger); \n  delay(1500).then(logger); \n\n\n  // ======================= Subtask 2 =======================\n  const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, username) => {\n    return new Promise((resolve) => {\n      const updatedUsers = allUsers.map(user => user.name === username ? { ...user, active: !user.active } : user);\n      resolve(updatedUsers);\n    })\n  };\n\n  toggleUserState(users, 'Mango').then(console.table);\n  toggleUserState(users, 'Ajax').then(console.table);\n  \n  // ======================= Subtask 3 =======================\n  const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction) => {\n    return new Promise ((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  \n      setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n    \n        if (canProcess) {\n          resolve({ id: transaction.id, time: delay });\n        } \n          reject (transaction.id);\n      }, delay);\n    })\n  };\n  \n  const logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}